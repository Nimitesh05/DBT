db.courses.updateMany(
  { name: /^J/ },  // Filter for names starting with "J"
  { $set: { /* fields to update */ } }  // Update operation
)

////////////////////////////////////////////////////////////////

// Switch to a specific database
use <database>

// Show current database
db

// List all databases
show dbs
show databases

// List all collections in current database
show collections

// Display help
help
CRUD Operations
Create (Insert)
javascript// Insert a single document
db.collection.insertOne({ field1: "value1", field2: "value2" })

// Insert multiple documents
db.collection.insertMany([
  { field1: "value1" },
  { field1: "value2" }
])

// Legacy insert (still works)
db.collection.insert({ field: "value" })
db.collection.insert([{ field: "value1" }, { field: "value2" }])
Read (Query)
javascript// Find all documents in a collection
db.collection.find()

// Find with conditions
db.collection.find({ field: "value" })

// Find with complex conditions
db.collection.find({ field: { $gt: 10 } })
db.collection.find({ field: { $in: ["value1", "value2"] } })

// Query operators
// $eq, $gt, $gte, $lt, $lte, $ne, $in, $nin, $and, $or, $not, $nor, $exists, $type, $regex

// Find one document
db.collection.findOne({ field: "value" })

// Projection (include/exclude fields)
db.collection.find({}, { field1: 1, field2: 1 }) // Include only field1 and field2
db.collection.find({}, { field1: 0 }) // Exclude field1

// Cursor methods
db.collection.find().sort({ field: 1 }) // 1 for ascending, -1 for descending
db.collection.find().limit(10)
db.collection.find().skip(10)
db.collection.find().count()
db.collection.find().size()
db.collection.find().forEach(function(doc) { print(doc.field) })
db.collection.find().map(function(doc) { return doc.field })
db.collection.find().toArray()
db.collection.find().pretty()
Update
javascript// Update a single document
db.collection.updateOne(
  { field: "value" }, // filter
  { $set: { field2: "new_value" } } // update
)

// Update multiple documents
db.collection.updateMany(
  { field: "value" },
  { $set: { field2: "new_value" } }
)

// Replace entire document
db.collection.replaceOne(
  { field: "value" },
  { new_field: "new_value" }
)

// Update operators
// $set, $unset, $inc, $mul, $rename, $min, $max, $currentDate, $addToSet, $pop, $pull, $push

// Upsert (insert if not exists)
db.collection.updateOne(
  { field: "value" },
  { $set: { field2: "new_value" } },
  { upsert: true }
)

// Find and modify (returns document)
db.collection.findAndModify({
  query: { field: "value" },
  update: { $set: { field2: "new_value" } },
  new: true // return updated document
})

// Bulk write operations
db.collection.bulkWrite([
  { insertOne: { document: { field: "value" } } },
  { updateOne: { filter: { field: "value" }, update: { $set: { field2: "value2" } } } },
  { deleteOne: { filter: { field: "value" } } }
])
Delete
javascript// Delete a single document
db.collection.deleteOne({ field: "value" })

// Delete multiple documents
db.collection.deleteMany({ field: "value" })

// Delete all documents in collection
db.collection.deleteMany({})

// Drop entire collection
db.collection.drop()

// Drop entire database
db.dropDatabase()
Aggregation Framework
javascript// Basic aggregation
db.collection.aggregate([
  { $match: { field: "value" } },
  { $group: { _id: "$groupField", count: { $sum: 1 } } },
  { $sort: { count: -1 } }
])

// Common aggregation stages
// $match, $group, $project, $sort, $limit, $skip, $unwind, $lookup, $facet, $out

// Example: Join-like operation with $lookup
db.orders.aggregate([
  {
    $lookup: {
      from: "customers",
      localField: "customer_id",
      foreignField: "_id",
      as: "customer_info"
    }
  }
])

// Example: Complex projection
db.collection.aggregate([
  {
    $project: {
      name: 1,
      firstLetter: { $substr: ["$name", 0, 1] },
      nameLength: { $strLenCP: "$name" }
    }
  }
])

// Count documents with conditions
db.collection.countDocuments({ field: "value" })

// Distinct values
db.collection.distinct("field", { optional_query: "value" })
Indexing
javascript// Create single field index
db.collection.createIndex({ field: 1 }) // 1 for ascending, -1 for descending

// Create compound index
db.collection.createIndex({ field1: 1, field2: -1 })

// Create unique index
db.collection.createIndex({ field: 1 }, { unique: true })

// Create text index
db.collection.createIndex({ field: "text" })

// Create geospatial index
db.collection.createIndex({ location: "2dsphere" })

// Create TTL index (documents expire after seconds)
db.collection.createIndex({ createdAt: 1 }, { expireAfterSeconds: 3600 })

// Get all indexes for a collection
db.collection.getIndexes()

// Drop an index
db.collection.dropIndex("index_name")
db.collection.dropIndex({ field: 1 })

// Drop all indexes (except _id)
db.collection.dropIndexes()
Administrative Commands
javascript// Collection stats
db.collection.stats()

// Database stats
db.stats()

// Server status
db.serverStatus()

// Current operations
db.currentOp()

// Kill operation
db.killOp(opId)

// Repair database
db.repairDatabase()

// Collection validation
db.collection.validate()

// Compact collection (defragment and reclaim space)
db.runCommand({ compact: "collection_name" })

// User management
db.createUser({
  user: "username",
  pwd: "password",
  roles: [{ role: "readWrite", db: "database_name" }]
})
db.getUsers()
db.dropUser("username")

// Role management
db.createRole({ ... })
db.getRoles()
db.dropRole("roleName")

// Authentication
db.auth("username", "password")
Data Export/Import
javascript// These are shell commands (run outside the mongo shell)
// Export collection to JSON
mongoexport --db=dbname --collection=collname --out=file.json

// Import JSON to collection
mongoimport --db=dbname --collection=collname --file=file.json

// Export database to BSON
mongodump --db=dbname --out=directory

// Import BSON to database
mongorestore --db=dbname directory
MongoDB Shell Functions
javascript// Print to console
print("message")

// Sleep (milliseconds)
sleep(1000)

// Load JavaScript file
load("file.js")

// Run command
db.runCommand({ command: "parameters" })

// Get last error
db.getLastError()
db.getLastErrorObj()

// Profiling
db.setProfilingLevel(2) // 0=off, 1=slow, 2=all
db.getProfilingStatus()
db.system.profile.find().pretty()
Special Commands and Unique Operations
javascript// Execute JavaScript on server
db.eval("function() { return 'server-side js'; }")

// Explain query execution
db.collection.find({ field: "value" }).explain("executionStats")

// Get collection data size
db.collection.dataSize()

// Get storage size
db.collection.storageSize()

// Reindex collection
db.collection.reIndex()

// Collection modification
db.collection.renameCollection("new_name")

// Find documents with specific size
db.collection.find({ $where: "this.field.length > 10" })

// Map-reduce (older alternative to aggregation)
db.collection.mapReduce(
  function() { emit(this.key, this.value); },  // map function
  function(key, values) { return Array.sum(values) },  // reduce function
  { out: "result_collection" }  // output
)
These commands cover most of the functionality available in the MongoDB shell. Remember that in the newer MongoDB Shell (mongosh), some commands may have slightly different syntax or additional features.